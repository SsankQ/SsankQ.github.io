<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>SsankQ's DevLog</title><subtitle>이것저것 기록하는 개발일지</subtitle> <updated>2022-06-24T17:01:18+09:00</updated> <author> <name>hyeongyu kim</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 hyeongyu kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Database Index</title><link href="/posts/06-20-CS-DB-Index/" rel="alternate" type="text/html" title="Database Index" /><published>2022-06-20T16:30:00+09:00</published> <updated>2022-06-20T16:30:00+09:00</updated> <id>/posts/06-20-CS-DB-Index/</id> <content src="/posts/06-20-CS-DB-Index/" /> <author> <name>{"name"=>"SsankQ"}</name> </author> <category term="Computer Science" /> <summary> 참조 블로그 “면접때 대답을 잘 못해서 공부해야겠다는 생각이 들었다.. 트랜잭션도 시원하게 설명 못했다.. 작성하는대로 복습할 것!” Database Index 인덱스(Index)란? “데이터베이스 테이블에 대한 검색 성능 속도를 높여주는 자료구조” 데이터의 주소값을 저장하는 별도의 특별한 자료구조 흔히 책의 목차(Index)에 비유하곤 한다. 원하는 데이터를 빠르게 찾을 수 있게 해준다 인덱스의 가장 큰 특징은 데이터들이 정렬되어 있다는 점이다 인덱스 사용 이유? 정렬되어 있는 점을 살려 Full Table Scan 보다 조건 검색에 굉장한 이점을 가져오게 해준다 Full Table Scan 말 그대로 테이블 전체를 탐색해 원하는 데이터를 가져오는 것 ... </summary> </entry> <entry><title>SQL vs NoSQL</title><link href="/posts/06-18-CS-SQLvsNoSQL/" rel="alternate" type="text/html" title="SQL vs NoSQL" /><published>2022-06-18T15:30:00+09:00</published> <updated>2022-06-18T15:30:00+09:00</updated> <id>/posts/06-18-CS-SQLvsNoSQL/</id> <content src="/posts/06-18-CS-SQLvsNoSQL/" /> <author> <name>{"name"=>"SsankQ"}</name> </author> <category term="Computer Science" /> <summary> SQL vs NoSQL SQL(RDBMS) 데이터는 정해진 데이터 스키마에 따라 테이블에 저장 데이터는 관계를 통해 여러 테이블에 분산 각 테이블마다 명확하게 정의되어 있는 구조가 존재한다 스키마를 준수하지 않는 레코드는 테이블에 추가될 수 없다 NoSQL(DBMS) 스키마, 관계가 없는 것이 가장 큰 특징 Document, Collection의 명칭을 따른다 SQL과는 달리 정해진 스키마가 존재하지 않아 다른 구조의 데이터도 추가가 가능하다 SQL vs NoSQL 확장(Scaling) SQL : 정해진 스키마 구조를 변경할 수 없기에, “수직적 확장”만이 가능하다 NoSQL : “수평적 확장”이 가능하다 ... </summary> </entry> <entry><title>CAP 이론</title><link href="/posts/06-17-CS-CAP%EC%9D%B4%EB%A1%A0/" rel="alternate" type="text/html" title="CAP 이론" /><published>2022-06-17T15:30:00+09:00</published> <updated>2022-06-19T00:31:45+09:00</updated> <id>/posts/06-17-CS-CAP%EC%9D%B4%EB%A1%A0/</id> <content src="/posts/06-17-CS-CAP%EC%9D%B4%EB%A1%A0/" /> <author> <name>{"name"=>"SsankQ"}</name> </author> <category term="Computer Science" /> <summary> CAP 이론 CAP이란? 관계형 데이터 모델을 지양하는 NoSQL에서 의미있는 이론이다 세가지 속성을 뜻하며 각각 일관성, 가용성, 분단 허용성을 뜻한다 분산 시스템에서는 위 3가지 속성을 모두 충족하는 것은 불가능하며, 오직 2가지만 만족할 수 있다 (CA / AP / CP) 일관성(Consistency) ACID의 일관성과 같은 의미를 지닌다 DB가 분산된 경우에도 하나가 수정되면 다른 DB에도 동일하게 변경되어야 한다 가용성(Availability) 모든 서버는 클라이언트에게 항상 정상적인 응답을 보내줘야 한다는 특성 분산된 DB에서도 특정 DB에 문제가 발생해도 다른 DB에서 정상 응답을 돌려줘야한다 분단 허용성(Partition Tolerance)... </summary> </entry> <entry><title>트랜잭션(Transaction)</title><link href="/posts/06-16-CS-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/" rel="alternate" type="text/html" title="트랜잭션(Transaction)" /><published>2022-06-16T15:30:00+09:00</published> <updated>2022-06-17T15:45:13+09:00</updated> <id>/posts/06-16-CS-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/</id> <content src="/posts/06-16-CS-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/" /> <author> <name>{"name"=>"SsankQ"}</name> </author> <category term="Computer Science" /> <summary> 트랜잭션 트랜잭션(Transaction)이란? 데이터베이스의 상태를 변화시키기 위해 수행하는 작업의 단위 하나로 묶인 작업들은 모두 실행되거나, 실행되지 않는다 (All-or-Nothing) 트랜잭션의 특징 SQL은 ACID 특성을 따른다 원자성 (Atomicity) 트랜잭션의 작업이 부분적으로 실행되거나 중단되지 않는 것을 보장 =&amp;gt; 불가능한 최소의 단위인 하나의 원자처럼 동작 일관성 (Consistency) 미리 정의된 규칙(제약)에서만 수정이 가능한 특성 데이터베이스의 상태는 이전과 같이 유효해야한다 독립성 (Isoloation) 모든 트랜잭션은 다른 트랜잭션으로부터 독립되어야 하는 특성 트랜잭션 수행 시 다른 트랜잭션의 작업이 끼어... </summary> </entry> <entry><title>프레임워크 vs 라이브러리</title><link href="/posts/06-13-CS-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%ACvs%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/" rel="alternate" type="text/html" title="프레임워크 vs 라이브러리" /><published>2022-06-13T16:30:00+09:00</published> <updated>2022-06-13T16:30:00+09:00</updated> <id>/posts/06-13-CS-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%ACvs%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/</id> <content src="/posts/06-13-CS-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%ACvs%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/" /> <author> <name>{"name"=>"SsankQ"}</name> </author> <category term="Computer Science" /> <summary> 참조 블로그 프레임워크 vs 라이브러리 프레임워크(Framework)란? 원하는 기능 구현에 집중해 개발할 수 있도록 형태와 기능을 갖추고 있는 골격(뼈대) 앱(서버) 구동, 메모리, 이벤트 루프 등의 부분은 프레임워크가 관리, 사용자는 정해진 방식대로 구현 예시 웹 개발 : Angular, Vue.js 등 Node.js : Express, NestJS 등 라이브러리(Library)란? 특정 기능을 모와둔 코드, 함수들의 집합이며 코드 작성 시 활용 가능한 도구들을 의미 예시 JavaScript : React Node.js : npm으로 설치한 모듈 프레임워크 ... </summary> </entry> </feed>
